// Vehicle.java
public abstract class Vehicle {
    private String name;

    public Vehicle(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public abstract void move();
}


// LandVehicle.java
public abstract class LandVehicle extends Vehicle {
    private int numberOfWheels;

    public LandVehicle(String name, int numberOfWheels) {
        super(name);
        this.numberOfWheels = numberOfWheels;
    }


// Boat.java
public class Boat extends WaterVehicle implements Engine {
    private String engineType;

    public Boat(String name, String engineType) {
        super(name);
        this.engineType = engineType;
    }

    @Override
    public void startEngine() {
        System.out.println(getName() + " is starting its " + engineType + " engine.");
    }

    @Override
    public void stopEngine() {
        System.out.println(getName() + " has stopped its " + engineType + " engine.");
    }

    @Override
    public void move() {
        startEngine();
        super.move();
        stopEngine();
    }
}

    public int getNumberOfWheels() {
        return numberOfWheels;
    } 


// WaterVehicle.java
public abstract class WaterVehicle extends Vehicle {
    public WaterVehicle(String name) {
        super(name);
    }

    @Override
    public void move() {
        System.out.println(getName() + " is sailing on water.");
    }
}


    @Override
    public void move() {
        System.out.println(getName() + " is moving on " + numberOfWheels + " wheels.");
    }
}


// Car.java
public class Car extends LandVehicle implements Engine {
    private String engineType;

    public Car(String name, int numberOfWheels, String engineType) {
        super(name, numberOfWheels);
        this.engineType = engineType;
    }

    @Override
    public void startEngine() {
        System.out.println(getName() + " is starting its " + engineType + " engine.");
    }

    @Override
    public void stopEngine() {
        System.out.println(getName() + " has stopped its " + engineType + " engine.");
    }

    @Override
    public void move() {
        startEngine();
        super.move();
        stopEngine();
    }
}
